"""
Sistema de Inventario y Ventas con PostgreSQL
===========================================

Este script implementa un sistema de gesti√≥n de inventario y ventas
con an√°lisis de datos en tiempo real. Es un ejemplo educativo que
muestra c√≥mo usar SQL en un contexto empresarial real.

üéØ Objetivos de Aprendizaje:
--------------------------
1. Implementaci√≥n de CRUD en PostgreSQL
2. An√°lisis de datos con SQL
3. Manejo de transacciones y relaciones
4. Generaci√≥n de reportes empresariales

üìù Preguntas de An√°lisis:
-----------------------
1. ¬øPor qu√© usamos DECIMAL(10,2) para los precios en lugar de FLOAT?
2. ¬øQu√© ventajas ofrece el uso de FOREIGN KEY en la tabla ventas?
3. ¬øPor qu√© es importante el uso de transacciones en las ventas?
4. ¬øC√≥mo ayuda el an√°lisis de datos en la toma de decisiones?
5. ¬øQu√© mejoras sugieres para el sistema?


üí° Conceptos Clave:
----------------
- Relaciones entre tablas (productos -> ventas)
- Agregaciones SQL (SUM, AVG, COUNT)
- An√°lisis temporal de datos
- Gesti√≥n de inventario
- Reportes empresariales

"""

import psycopg2
import psycopg2.extras

# Usar la misma conexi√≥n que funciona en main.py
inventory_neo =
def get_inventory_connection():
    """
    Devuelve una conexi√≥n a la base de datos PostgreSQL para el inventario.
    """
    return psycopg2.connect(inventory_neo)


def create_inventory_tables():
    """
    Crea las tablas necesarias para el sistema de inventario.

    üìö An√°lisis de la Estructura:
    --------------------------
    1. Tabla productos: Almacena el cat√°logo de productos
       - ¬øPor qu√© usamos SERIAL para el ID?
       - ¬øQu√© implica NOT NULL en nombre y precio?

    2. Tabla ventas: Registra las transacciones
       - ¬øC√≥mo se relaciona con productos?
       - ¬øPor qu√© usamos DEFAULT CURRENT_TIMESTAMP?
    """
    create_tables_query = """
    CREATE TABLE IF NOT EXISTS productos (
        id SERIAL PRIMARY KEY,
        nombre VARCHAR(100) NOT NULL,
        precio DECIMAL(10, 2) NOT NULL,
        stock INTEGER DEFAULT 0
    );

    CREATE TABLE IF NOT EXISTS ventas (
        id SERIAL PRIMARY KEY,
        producto_id INTEGER REFERENCES productos(id),
        cantidad INTEGER NOT NULL,
        fecha_venta TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    """
    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()
        cursor.execute(create_tables_query)
        conn.commit()
        cursor.close()
        conn.close()
        print("‚úÖ [OK] Tablas de inventario creadas (o ya existen).")
    except Exception as e:
        print("‚ùå [ERROR] No se pudieron crear las tablas de inventario:", e)


def insert_product():
    """
    Inserta un nuevo producto en la tabla 'productos'.
    """
    print("\nüì¶ Registro de nuevo producto:")
    nombre = input("  üè∑Ô∏è Nombre del producto: ")
    precio = input("  üí≤ Precio: ")
    stock = input("  üì¶ Stock: ")

    insert_query = """
    INSERT INTO productos (nombre, precio, stock)
    VALUES (%s, %s, %s)
    RETURNING id, nombre;
    """
    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()
        cursor.execute(insert_query, (nombre, precio, stock))
        producto_id, producto_nombre = cursor.fetchone()
        conn.commit()
        print(
            f"‚úÖ [INSERT] Producto '{producto_nombre}' registrado con ID={producto_id}"
        )
        cursor.close()
        conn.close()
    except Exception as e:
        print("‚ùå [INSERT - ERROR]", e)


def view_products():
    """
    Muestra todos los productos disponibles.
    """
    select_query = "SELECT id, nombre, precio, stock FROM productos;"
    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()
        cursor.execute(select_query)
        productos = cursor.fetchall()
        cursor.close()
        conn.close()

        if productos:
            print("\nüì¶ Lista de Productos:")
            print("=" * 80)
            for producto in productos:
                print(f"ID: {producto[0]}")
                print(f"üè∑Ô∏è Nombre: {producto[1]}")
                print(f"üí≤ Precio: {producto[2]}")
                print(f"üì¶ Stock: {producto[3]}")
                print("-" * 80)
        else:
            print("‚ö†Ô∏è No hay productos registrados")
    except Exception as e:
        print("‚ùå [SELECT - ERROR]", e)


def insert_sale():
    """
    Registra una venta en la tabla 'ventas'.
    """
    print("\nüõí Registro de nueva venta:")
    producto_id = input("  üè∑Ô∏è ID del producto: ")
    cantidad = input("  üî¢ Cantidad: ")

    insert_query = """
    INSERT INTO ventas (producto_id, cantidad)
    VALUES (%s, %s)
    RETURNING id;
    """
    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()
        cursor.execute(insert_query, (producto_id, cantidad))
        venta_id = cursor.fetchone()[0]
        conn.commit()
        print(f"‚úÖ [INSERT] Venta registrada con ID={venta_id}")
        cursor.close()
        conn.close()
    except Exception as e:
        print("‚ùå [INSERT - ERROR]", e)


def view_sales():
    """
    Muestra el historial de ventas.
    """
    select_query = """
    SELECT v.id, p.nombre, v.cantidad, v.fecha_venta
    FROM ventas v
    JOIN productos p ON v.producto_id = p.id
    ORDER BY v.fecha_venta DESC;
    """
    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()
        cursor.execute(select_query)
        ventas = cursor.fetchall()
        cursor.close()
        conn.close()

        if ventas:
            print("\nüõí Historial de Ventas:")
            print("=" * 80)
            for venta in ventas:
                print(f"ID Venta: {venta[0]}")
                print(f"üè∑Ô∏è Producto: {venta[1]}")
                print(f"üî¢ Cantidad: {venta[2]}")
                print(f"üìÖ Fecha: {venta[3]}")
                print("-" * 80)
        else:
            print("‚ö†Ô∏è No hay ventas registradas")
    except Exception as e:
        print("‚ùå [SELECT - ERROR]", e)


def generate_analytics():
    """
    Genera reportes y an√°lisis autom√°ticos de ventas e inventario
    """
    analytics_queries = {
        "ventas_por_dia": """
            SELECT DATE(fecha_venta) as dia,
                   COUNT(*) as total_ventas,
                   SUM(v.cantidad * p.precio) as ingresos_total
            FROM ventas v
            JOIN productos p ON v.producto_id = p.id
            GROUP BY dia
            ORDER BY dia DESC
            LIMIT 7;
        """,
        "productos_mas_vendidos": """
            SELECT p.nombre,
                   SUM(v.cantidad) as unidades_vendidas,
                   SUM(v.cantidad * p.precio) as ingresos_generados
            FROM ventas v
            JOIN productos p ON v.producto_id = p.id
            GROUP BY p.id, p.nombre
            ORDER BY unidades_vendidas DESC
            LIMIT 5;
        """,
        "stock_critico": """
            SELECT nombre, stock,
                   CASE 
                       WHEN stock = 0 THEN '‚ùå Sin stock'
                       WHEN stock < 5 THEN '‚ö†Ô∏è Cr√≠tico'
                       WHEN stock < 10 THEN 'üìä Bajo'
                       ELSE '‚úÖ Normal'
                   END as estado
            FROM productos
            WHERE stock < 10
            ORDER BY stock ASC;
        """,
        "promedio_ventas": """
            SELECT p.nombre,
                   ROUND(AVG(v.cantidad), 2) as promedio_unidades,
                   ROUND(AVG(v.cantidad * p.precio), 2) as promedio_ingresos
            FROM ventas v
            JOIN productos p ON v.producto_id = p.id
            GROUP BY p.id, p.nombre
            ORDER BY promedio_ingresos DESC;
        """,
    }

    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()

        # Ventas por d√≠a
        print("\nüìä AN√ÅLISIS DE VENTAS (√öltimos 7 d√≠as)")
        print("=" * 50)
        cursor.execute(analytics_queries["ventas_por_dia"])
        for dia, total, ingresos in cursor.fetchall():
            print(f"üìÖ {dia}: {total} ventas | üí∞ ${ingresos:.2f}")

        # Productos m√°s vendidos
        print("\nüèÜ TOP 5 PRODUCTOS M√ÅS VENDIDOS")
        print("=" * 50)
        cursor.execute(analytics_queries["productos_mas_vendidos"])
        for nombre, unidades, ingresos in cursor.fetchall():
            print(f"üì¶ {nombre}: {unidades} uds | üí∞ ${ingresos:.2f}")

        # Stock cr√≠tico
        print("\n‚ö†Ô∏è ALERTAS DE STOCK")
        print("=" * 50)
        cursor.execute(analytics_queries["stock_critico"])
        for nombre, stock, estado in cursor.fetchall():
            print(f"{estado} {nombre}: {stock} unidades")

        # Promedios
        print("\nüìà PROMEDIOS DE VENTA")
        print("=" * 50)
        cursor.execute(analytics_queries["promedio_ventas"])
        for nombre, prom_uds, prom_ing in cursor.fetchall():
            print(f"üì¶ {nombre}:")
            print(f"   Promedio uds: {prom_uds}/venta")
            print(f"   Promedio $: ${prom_ing}/venta")

        cursor.close()
        conn.close()
    except Exception as e:
        print("‚ùå [ANALYTICS - ERROR]", e)


def insert_sample_data():
    """
    Inserta datos de ejemplo para pruebas y aprendizaje.
    """
    productos_ejemplo = [
        ("Laptop Gaming", 1299.99, 5),
        ("Monitor 24'", 199.99, 15),
        ("Teclado Mec√°nico", 89.99, 20),
        ("Mouse Gamer", 49.99, 30),
        ("Auriculares RGB", 79.99, 12),
        ("Webcam HD", 59.99, 8),
        ("Mousepad XL", 19.99, 25),
        ("Hub USB", 29.99, 18),
    ]

    # Ventas con m√°s datos hist√≥ricos y patrones realistas
    ventas_ejemplo = [
        # Enero 2024
        (1, 2, "2024-01-01"),
        (2, 3, "2024-01-01"),
        (3, 1, "2024-01-02"),
        (4, 2, "2024-01-02"),
        (5, 2, "2024-01-03"),
        (1, 1, "2024-01-03"),
        (2, 2, "2024-01-04"),
        (3, 3, "2024-01-05"),
        # Febrero 2024
        (1, 3, "2024-02-01"),
        (2, 2, "2024-02-01"),
        (4, 4, "2024-02-02"),
        (5, 1, "2024-02-02"),
        (3, 2, "2024-02-03"),
        (1, 1, "2024-02-03"),
        (2, 3, "2024-02-04"),
        (4, 2, "2024-02-05"),
        # Marzo 2024
        (1, 2, "2024-03-01"),
        (5, 3, "2024-03-01"),
        (2, 2, "2024-03-02"),
        (3, 4, "2024-03-02"),
        (4, 1, "2024-03-03"),
        (1, 2, "2024-03-03"),
        (5, 2, "2024-03-04"),
        (2, 1, "2024-03-05"),
        # Ventas recientes con m√°s frecuencia
        (1, 3, "2024-03-15"),
        (2, 2, "2024-03-15"),
        (3, 2, "2024-03-16"),
        (4, 3, "2024-03-16"),
        (5, 1, "2024-03-17"),
        (1, 2, "2024-03-17"),
        (2, 4, "2024-03-18"),
        (3, 1, "2024-03-18"),
        (4, 2, "2024-03-19"),
        (5, 3, "2024-03-19"),
        (1, 1, "2024-03-20"),
        (2, 2, "2024-03-20"),
        # √öltimos d√≠as con patr√≥n de alta demanda
        (3, 3, "2024-03-21"),
        (4, 4, "2024-03-21"),
        (5, 2, "2024-03-22"),
        (1, 3, "2024-03-22"),
        (2, 3, "2024-03-23"),
        (3, 2, "2024-03-23"),
        (4, 3, "2024-03-24"),
        (5, 4, "2024-03-24"),
        (1, 2, "2024-03-25"),
        (2, 3, "2024-03-25"),
    ]

    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()

        # Limpiar datos existentes
        cursor.execute("TRUNCATE TABLE ventas RESTART IDENTITY CASCADE")
        cursor.execute("TRUNCATE TABLE productos RESTART IDENTITY CASCADE")

        # Insertar productos
        cursor.executemany(
            "INSERT INTO productos (nombre, precio, stock) VALUES (%s, %s, %s)",
            productos_ejemplo,
        )

        # Insertar ventas
        cursor.executemany(
            """
            INSERT INTO ventas (producto_id, cantidad, fecha_venta) 
            VALUES (%s, %s, %s::timestamp)
            """,
            ventas_ejemplo,
        )

        conn.commit()
        print("‚úÖ Datos de ejemplo insertados correctamente")

        # Mostrar resumen
        print("\nüìä Resumen de datos insertados:")
        print(f"- Productos: {len(productos_ejemplo)}")
        print(f"- Ventas registradas: {len(ventas_ejemplo)}")
        print("- Per√≠odo: Enero 2024 - Marzo 2024")

        cursor.close()
        conn.close()

    except Exception as e:
        print("‚ùå Error al insertar datos de ejemplo:", e)


def generate_advanced_analytics():
    """
    Genera reportes avanzados de ventas e inventario.

    üìä An√°lisis de Consultas:
    ----------------------
    1. Tendencia de ventas:
       - GROUP BY con funciones temporales
       - C√°lculo de m√©tricas agregadas

    2. Rentabilidad:
       - JOIN entre productos y ventas
       - C√°lculos financieros b√°sicos

    ü§î Preguntas para Reflexionar:
    ---------------------------
    1. ¬øQu√© otros an√°lisis ser√≠an √∫tiles?
    2. ¬øC√≥mo podr√≠amos mejorar el rendimiento?
    3. ¬øQu√© insights de negocio podemos obtener?
    """
    advanced_queries = {
        "tendencia_ventas": """
            SELECT 
                DATE_TRUNC('day', fecha_venta) as dia,
                COUNT(*) as total_ventas,
                SUM(v.cantidad * p.precio) as ingresos,
                ROUND(AVG(v.cantidad * p.precio), 2) as ticket_promedio
            FROM ventas v
            JOIN productos p ON v.producto_id = p.id
            GROUP BY dia
            ORDER BY dia DESC;
        """,
        "rentabilidad_productos": """
            SELECT 
                p.nombre,
                p.precio,
                COUNT(v.id) as veces_vendido,
                SUM(v.cantidad) as unidades_vendidas,
                SUM(v.cantidad * p.precio) as ingresos_totales,
                ROUND(SUM(v.cantidad * p.precio) / NULLIF(COUNT(v.id), 0), 2) as ingreso_por_venta
            FROM productos p
            LEFT JOIN ventas v ON p.id = v.producto_id
            GROUP BY p.id, p.nombre, p.precio
            ORDER BY ingresos_totales DESC NULLS LAST;
        """,
        "inventario_valor": """
            SELECT 
                SUM(stock * precio) as valor_total_inventario,
                ROUND(AVG(stock * precio), 2) as valor_promedio_producto,
                COUNT(CASE WHEN stock < 10 THEN 1 END) as productos_stock_bajo
            FROM productos;
        """,
    }

    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()

        print("\nüìä AN√ÅLISIS AVANZADO DE VENTAS E INVENTARIO")
        print("=" * 60)

        # Tendencia de ventas
        cursor.execute(advanced_queries["tendencia_ventas"])
        print("\nüìà TENDENCIA DE VENTAS POR D√çA")
        print("-" * 60)
        for dia, total, ingresos, ticket in cursor.fetchall():
            print(f"üìÖ {dia.strftime('%Y-%m-%d')}:")
            print(
                f"   Ventas: {total} | üí∞ ${ingresos:.2f} | üé´ Ticket promedio: ${ticket}"
            )

        # Rentabilidad de productos
        cursor.execute(advanced_queries["rentabilidad_productos"])
        print("\nüíπ RENTABILIDAD POR PRODUCTO")
        print("-" * 60)
        for nombre, precio, veces, uds, ingresos, promedio in cursor.fetchall():
            print(f"üì¶ {nombre}")
            print(f"   Precio: ${precio:.2f} | Vendido: {veces} veces")
            print(f"   Unidades: {uds or 0} | Ingresos: ${ingresos or 0:.2f}")
            print(f"   Promedio por venta: ${promedio or 0:.2f}")

        # Valor del inventario
        cursor.execute(advanced_queries["inventario_valor"])
        valor = cursor.fetchone()
        print("\nüíé VALOR DEL INVENTARIO")
        print("-" * 60)
        print(f"üìä Valor total: ${valor[0]:.2f}")
        print(f"üìà Promedio por producto: ${valor[1]:.2f}")
        print(f"‚ö†Ô∏è Productos en stock bajo: {valor[2]}")

        cursor.close()
        conn.close()

    except Exception as e:
        print("‚ùå [ANALYTICS ERROR]:", e)


def generate_projections():
    """
    Genera proyecciones de ventas basadas en datos hist√≥ricos.

    üìä An√°lisis Predictivo Simple:
    ---------------------------
    - Proyecci√≥n lineal de ventas
    - Estimaci√≥n de stock necesario
    - Predicci√≥n de ingresos
    """
    projection_queries = {
        "tendencia_mensual": """
            WITH datos_mensuales AS (
                SELECT 
                    DATE_TRUNC('month', fecha_venta) as mes,
                    SUM(v.cantidad * p.precio) as ingresos,
                    COUNT(*) as total_ventas,
                    SUM(v.cantidad) as unidades_vendidas
                FROM ventas v
                JOIN productos p ON v.producto_id = p.id
                GROUP BY mes
                ORDER BY mes
            )
            SELECT 
                mes,
                ingresos,
                unidades_vendidas,
                ROUND(AVG(ingresos) OVER (ORDER BY mes ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) as tendencia_ingresos,
                ROUND(AVG(unidades_vendidas) OVER (ORDER BY mes ROWS BETWEEN 2 PRECEDING AND CURRENT ROW), 2) as tendencia_unidades
            FROM datos_mensuales;
        """,
        "proyeccion_productos": """
            WITH datos_producto AS (
                SELECT 
                    p.id,
                    p.nombre,
                    p.stock,
                    COUNT(v.id) as frecuencia_ventas,
                    COALESCE(SUM(v.cantidad), 0) as total_vendido,
                    COALESCE(AVG(v.cantidad), 0) as promedio_por_venta,
                    COUNT(DISTINCT DATE_TRUNC('day', v.fecha_venta)) as dias_con_ventas,
                    (SELECT COUNT(DISTINCT DATE_TRUNC('day', fecha_venta)) FROM ventas) as total_dias
                FROM productos p
                LEFT JOIN ventas v ON p.id = v.producto_id
                GROUP BY p.id, p.nombre, p.stock
            )
            SELECT 
                nombre,
                stock,
                ROUND(promedio_por_venta, 2) as venta_promedio,
                ROUND(total_vendido / NULLIF(total_dias, 0), 2) as ventas_por_dia,
                ROUND(stock / NULLIF(total_vendido / NULLIF(total_dias, 0), 0), 0) as dias_restantes_stock,
                CASE 
                    WHEN stock / NULLIF(total_vendido / NULLIF(total_dias, 0), 0) < 7 THEN 'üö® Cr√≠tico'
                    WHEN stock / NULLIF(total_vendido / NULLIF(total_dias, 0), 0) < 14 THEN '‚ö†Ô∏è Atenci√≥n'
                    ELSE '‚úÖ Normal'
                END as estado_proyectado
            FROM datos_producto
            WHERE total_vendido > 0
            ORDER BY dias_restantes_stock ASC;
        """,
    }

    try:
        conn = get_inventory_connection()
        cursor = conn.cursor()

        # Tendencia mensual
        print("\nüìà TENDENCIAS Y PROYECCIONES")
        print("=" * 70)
        cursor.execute(projection_queries["tendencia_mensual"])
        print("\nüìÖ AN√ÅLISIS MENSUAL:")
        print("-" * 70)
        for mes, ingresos, unidades, tend_ing, tend_unid in cursor.fetchall():
            print(f"üìÜ {mes.strftime('%B %Y')}:")
            print(f"   üí∞ Ingresos: ${ingresos:.2f} | üì¶ Unidades: {unidades}")
            print(f"   üìà Tendencia ingresos: ${tend_ing:.2f}")
            print(f"   üìä Tendencia unidades: {tend_unid:.1f}")
            print("-" * 50)

        # Proyecci√≥n por producto
        print("\nüîÆ PROYECCI√ìN DE INVENTARIO")
        print("-" * 70)
        cursor.execute(projection_queries["proyeccion_productos"])
        for nombre, stock, prom, diario, dias, estado in cursor.fetchall():
            print(f"\nüì¶ {nombre}")
            print(f"   Stock actual: {stock} unidades")
            print(f"   Venta promedio: {prom:.1f} unidades por venta")
            print(f"   Venta diaria: {diario:.1f} unidades")
            if dias is not None:
                print(f"   {estado} - Stock dura aprox. {dias:.0f} d√≠as")
            else:
                print(f"   ‚ÑπÔ∏è Datos insuficientes para proyecci√≥n")

        cursor.close()
        conn.close()
    except Exception as e:
        print("‚ùå [PROJECTIONS ERROR]:", e)


def main_inventory_menu():
    """
    Men√∫ principal del sistema.

    üéì Nota Educativa:
    ---------------
    Este sistema simula un entorno real de negocio.
    Analiza c√≥mo cada opci√≥n del men√∫ corresponde a
    una necesidad empresarial espec√≠fica.

    üìù Ejercicios de An√°lisis:
    -----------------------
    1. ¬øQu√© otras opciones ser√≠an √∫tiles?
    2. ¬øC√≥mo mejorar√≠as la interfaz?
    3. ¬øQu√© validaciones adicionales agregar√≠as?
    """
    while True:
        print("\n=== üè™ SISTEMA DE INVENTARIO Y ANALYTICS ===")
        print("1) Crear tablas")
        print("2) Insertar datos de ejemplo ‚ú®")
        print("3) Gesti√≥n de Productos:")
        print("   3.1) Registrar producto")
        print("   3.2) Ver productos")
        print("4) Gesti√≥n de Ventas:")
        print("   4.1) Registrar venta")
        print("   4.2) Ver ventas")
        print("5) Analytics:")
        print("   5.1) Ver analytics b√°sicos")
        print("   5.2) Ver analytics avanzados üìä")
        print("   5.3) Ver proyecciones üîÆ")
        print("6) Salir")

        opcion = input("\nElige una opci√≥n: ")

        if opcion == "1":
            create_inventory_tables()
        elif opcion == "2":
            insert_sample_data()
        elif opcion == "3.1":
            insert_product()
        elif opcion == "3.2":
            view_products()
        elif opcion == "4.1":
            insert_sale()
        elif opcion == "4.2":
            view_sales()
        elif opcion == "5.1":
            generate_analytics()
        elif opcion == "5.2":
            generate_advanced_analytics()
        elif opcion == "5.3":
            generate_projections()
        elif opcion == "6":
            print("\nüëã ¬°Hasta luego!")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida")


def main():
    main_inventory_menu()


if __name__ == "__main__":
    main()
